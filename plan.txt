# Comprehensive Dynamic Ad System Schema

Here's a consolidated schema for your location-based ad system with monetization capabilities:

## Core Tables

### `ad_placement_type`
```sql
CREATE TABLE ad_placement_type (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL, -- e.g. 'popup', 'scroll', 'footer', 'dedicated_page'
    description VARCHAR(255),
    position VARCHAR(50) NOT NULL, -- 'popup', 'scroll', 'footer', etc.
    base_price DECIMAL NOT NULL
);
```

### `ad_target_type`
```sql
CREATE TABLE ad_target_type (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL, -- 'doctor', 'hospital', 'institution'
    description VARCHAR(255)
);
```

### `advertisement`
```sql
CREATE TABLE advertisement (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    image_url VARCHAR(255),
    target_url VARCHAR(255),

    -- Targeting information
    target_type_id INTEGER REFERENCES ad_target_type(id) ON UPDATE CASCADE,
    target_id BIGINT, -- FK to doctor/hospital/institution based on type
    placement_type_id INTEGER REFERENCES ad_placement_type(id),

    -- Location targeting
    district_id INTEGER REFERENCES district(id) ON UPDATE CASCADE,
    upazila_id INTEGER REFERENCES upazila(id) ON UPDATE CASCADE,
    union_id INTEGER REFERENCES "union"(id) ON UPDATE CASCADE,

    -- Specialization targeting (for doctors)
    speciality_id INTEGER REFERENCES speciality(id) ON UPDATE CASCADE,

    -- Demographic targeting
    age_group VARCHAR(50),
    gender VARCHAR(20),
    language_preference VARCHAR(50),

    -- Timing
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,

    -- Status
    is_active BOOLEAN DEFAULT TRUE NOT NULL,

    -- Performance metrics
    views INTEGER DEFAULT 0,
    clicks INTEGER DEFAULT 0,

    -- Metadata
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    created_by BIGINT REFERENCES users(id)
);
```

### `ad_pricing`
```sql
CREATE TABLE ad_pricing (
    id SERIAL PRIMARY KEY,
    placement_type_id INTEGER REFERENCES ad_placement_type(id),
    duration_in_days INTEGER NOT NULL,
    price DECIMAL NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

## Supporting Tables

### `ad_log` (for analytics)
```sql
CREATE TABLE ad_log (
    id BIGSERIAL PRIMARY KEY,
    advertisement_id BIGINT REFERENCES advertisement(id),
    action VARCHAR(20) NOT NULL, -- 'view', 'click'
    user_id BIGINT REFERENCES users(id),
    ip_address VARCHAR(45),
    user_agent TEXT,

    -- Location data
    district_id INTEGER REFERENCES district(id),
    upazila_id INTEGER REFERENCES upazila(id),

    -- Device info
    device_type VARCHAR(50),
    os VARCHAR(50),

    timestamp TIMESTAMP DEFAULT NOW()
);
```

### `ad_payment`
```sql
CREATE TABLE ad_payment (
    id BIGSERIAL PRIMARY KEY,
    advertisement_id BIGINT REFERENCES advertisement(id),
    amount DECIMAL NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL, -- 'pending', 'paid', 'refunded', 'failed'
    transaction_reference VARCHAR(100),
    payment_details JSONB,
    paid_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW()
);
```

### `ad_campaign` (optional for grouping ads)
```sql
CREATE TABLE ad_campaign (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    advertiser_id BIGINT NOT NULL,
    advertiser_type VARCHAR(50) NOT NULL, -- 'doctor', 'hospital', etc.
    budget DECIMAL,
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);
```

## Indexes for Performance
```sql
CREATE INDEX idx_advertisement_active ON advertisement(is_active, end_time);
CREATE INDEX idx_advertisement_location ON advertisement(district_id, upazila_id, union_id);
CREATE INDEX idx_ad_log_advertisement ON ad_log(advertisement_id);
CREATE INDEX idx_ad_log_timestamp ON ad_log(timestamp);
```

## Views for Reporting

### `ad_performance_view`
```sql
CREATE OR REPLACE VIEW ad_performance_view AS
SELECT
    a.id,
    a.title,
    apt.name as placement_type,
    att.name as target_type,
    COUNT(CASE WHEN al.action = 'view' THEN 1 END) as total_views,
    COUNT(CASE WHEN al.action = 'click' THEN 1 END) as total_clicks,
    (COUNT(CASE WHEN al.action = 'click' THEN 1 END) * 100.0 /
     NULLIF(COUNT(CASE WHEN al.action = 'view' THEN 1 END), 0)) as ctr,
    ap.amount as payment_amount,
    d.name as district,
    u.name as upazila
FROM advertisement a
LEFT JOIN ad_placement_type apt ON a.placement_type_id = apt.id
LEFT JOIN ad_target_type att ON a.target_type_id = att.id
LEFT JOIN ad_log al ON a.id = al.advertisement_id
LEFT JOIN ad_payment ap ON a.id = ap.advertisement_id
LEFT JOIN district d ON a.district_id = d.id
LEFT JOIN upazila u ON a.upazila_id = u.id
GROUP BY a.id, apt.name, att.name, ap.amount, d.name, u.name;
```

This comprehensive schema provides:
1. Flexible ad placement and targeting options
2. Location-based delivery at multiple geographic levels
3. Detailed analytics tracking
4. Monetization and payment tracking
5. Performance reporting capabilities
6. Support for different advertiser types (doctors, hospitals, etc.)

Would you like me to provide sample queries for common operations or suggest API endpoints to interact with this system?